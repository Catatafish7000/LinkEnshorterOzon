// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: url_shorter.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UrlShorter_SaveURL_FullMethodName = "/url_shorter.UrlShorter/SaveURL"
	UrlShorter_ShowURL_FullMethodName = "/url_shorter.UrlShorter/ShowURL"
)

// UrlShorterClient is the client API for UrlShorter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UrlShorterClient interface {
	SaveURL(ctx context.Context, in *Url, opts ...grpc.CallOption) (*Hash, error)
	ShowURL(ctx context.Context, in *Hash, opts ...grpc.CallOption) (*Url, error)
}

type urlShorterClient struct {
	cc grpc.ClientConnInterface
}

func NewUrlShorterClient(cc grpc.ClientConnInterface) UrlShorterClient {
	return &urlShorterClient{cc}
}

func (c *urlShorterClient) SaveURL(ctx context.Context, in *Url, opts ...grpc.CallOption) (*Hash, error) {
	out := new(Hash)
	err := c.cc.Invoke(ctx, UrlShorter_SaveURL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *urlShorterClient) ShowURL(ctx context.Context, in *Hash, opts ...grpc.CallOption) (*Url, error) {
	out := new(Url)
	err := c.cc.Invoke(ctx, UrlShorter_ShowURL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UrlShorterServer is the server API for UrlShorter service.
// All implementations should embed UnimplementedUrlShorterServer
// for forward compatibility
type UrlShorterServer interface {
	SaveURL(context.Context, *Url) (*Hash, error)
	ShowURL(context.Context, *Hash) (*Url, error)
}

// UnimplementedUrlShorterServer should be embedded to have forward compatible implementations.
type UnimplementedUrlShorterServer struct {
}

func (UnimplementedUrlShorterServer) SaveURL(context.Context, *Url) (*Hash, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveURL not implemented")
}
func (UnimplementedUrlShorterServer) ShowURL(context.Context, *Hash) (*Url, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowURL not implemented")
}

// UnsafeUrlShorterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UrlShorterServer will
// result in compilation errors.
type UnsafeUrlShorterServer interface {
	mustEmbedUnimplementedUrlShorterServer()
}

func RegisterUrlShorterServer(s grpc.ServiceRegistrar, srv UrlShorterServer) {
	s.RegisterService(&UrlShorter_ServiceDesc, srv)
}

func _UrlShorter_SaveURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Url)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UrlShorterServer).SaveURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UrlShorter_SaveURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UrlShorterServer).SaveURL(ctx, req.(*Url))
	}
	return interceptor(ctx, in, info, handler)
}

func _UrlShorter_ShowURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Hash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UrlShorterServer).ShowURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UrlShorter_ShowURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UrlShorterServer).ShowURL(ctx, req.(*Hash))
	}
	return interceptor(ctx, in, info, handler)
}

// UrlShorter_ServiceDesc is the grpc.ServiceDesc for UrlShorter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UrlShorter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "url_shorter.UrlShorter",
	HandlerType: (*UrlShorterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveURL",
			Handler:    _UrlShorter_SaveURL_Handler,
		},
		{
			MethodName: "ShowURL",
			Handler:    _UrlShorter_ShowURL_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "url_shorter.proto",
}
