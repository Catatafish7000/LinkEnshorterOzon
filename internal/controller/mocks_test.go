// Code generated by MockGen. DO NOT EDIT.
// Source: contract.go

// Package controller_test is a generated GoMock package.
package controller_test

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// Mockservice is a mock of service interface.
type Mockservice struct {
	ctrl     *gomock.Controller
	recorder *MockserviceMockRecorder
}

// MockserviceMockRecorder is the mock recorder for Mockservice.
type MockserviceMockRecorder struct {
	mock *Mockservice
}

// NewMockservice creates a new mock instance.
func NewMockservice(ctrl *gomock.Controller) *Mockservice {
	mock := &Mockservice{ctrl: ctrl}
	mock.recorder = &MockserviceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockservice) EXPECT() *MockserviceMockRecorder {
	return m.recorder
}

// SaveShortURL mocks base method.
func (m *Mockservice) SaveShortURL(ctx context.Context, url string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveShortURL", ctx, url)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveShortURL indicates an expected call of SaveShortURL.
func (mr *MockserviceMockRecorder) SaveShortURL(ctx, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveShortURL", reflect.TypeOf((*Mockservice)(nil).SaveShortURL), ctx, url)
}

// ShowLink mocks base method.
func (m *Mockservice) ShowLink(ctx context.Context, hash string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShowLink", ctx, hash)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShowLink indicates an expected call of ShowLink.
func (mr *MockserviceMockRecorder) ShowLink(ctx, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowLink", reflect.TypeOf((*Mockservice)(nil).ShowLink), ctx, hash)
}
